The test class generates my own data which is one int value for comparation and load, which of array with 42 double values.
In the following data, you can see how bad or good are the algorithms!
// (I don`t know if I need to say this algorithm is with O(n*logN) and etc...I suppose you need only the output data)
If you want to make the test arrays smaller or bigger you can modify all of them with the #macros SIZE in 'Test.h'!
The test with 20 000 elements don`t display the values...
Now they are with size 30.


Test with random elements!
  Insertion sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 417 45 107 417 819 388 900 531 279 351 102 537 861 302 603 321 675 365 844 904 185 179 628 77 615 963 35 
    Array after  sort: 963 904 900 861 844 819 675 628 615 603 537 531 417 417 388 365 351 321 302 279 185 179 107 102 77 45 35 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with almost sorted array!
  Insertion sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 27 29 28 30 26 25 24 23 22 21 17 19 18 20 16 15 14 13 12 11 7 9 8 10 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with empty array!
  Insertion sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 
    Array after  sort: 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with one type of elements!
  Insertion sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Array after  sort: 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with sorted array!
  Insertion sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Array after  sort: 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with inverted sorted array!
  Insertion sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
    Array after  sort: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with few types of elements!
  Insertion sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Merge sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!
  Shaker sort:
    Array before sort: 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 
    Array after  sort: 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 
    Test status: Passed!
    Sorting time: 0 seconds!

Test with 20 000 elements!
  Insertion sort:
    Test status: Passed!
    Sorting time: 20 seconds!
  Merge sort:
    Test status: Passed!
    Sorting time: 0 seconds!
  Heap sort:
    Test status: Passed!
    Sorting time: 0 seconds!
  Quick sort:
    Test status: Passed!
    Sorting time: 0 seconds!
  Selection sort:
    Test status: Passed!
    Sorting time: 5 seconds!
  Shaker sort:
    Test status: Passed!
    Sorting time: 24 seconds!

