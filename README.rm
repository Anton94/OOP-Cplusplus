# Database structures.
=====

# Условия:

#Special list project 
	Да се реализира структура от данни за поддържане на списъци. Тя трябва да може да:
	create(id, value): създава нов списък с идентификатор id и единствен елемент със стойност value
	merge(id1, id2): слива списъците с идентификатори id1 и id2, като елементите на id2 се добавят в края на id1, след което id2 спира да съществува
	split(id, pos, newId): разбива списъка с идентификатор id на две, като елементите от позиция pos нататък стават нов списък с идентификатор newId.
	reverse(id): обръща подредбата на елементите в списъка с идентификатор id (последният елемент става първи, предпоследният става втори и т.н.).
	min(id): връща минималния елемент в списъка id
	max(id): връща максималния елемент в списъка id

#Treap
	Реализирайте структурата от данни Treap, според езика за програмиране, който предпочитате. За C++ използвайте интерфейсът от файла Treap.cpp, а за Java използвайте Treap.java. Имплементирайте дадените методи както са описани, без да променяте дефинициите им, но при необходимост, може да добавяте други помощни методи.

#AVL
	Задачата е да имплементирате AVL дърво.

#Skew heap
	Реализирайте структурата от данни Skew Heap, според езика за програмиране, който предпочитате. За C++ използвайте интерфейсът от файла SkewHeap.cpp. Имплементирайте дадените методи както са описани, без да променяте дефинициите им, но при необходимост, може да добавяте други помощни методи.

#HashMap
	Реализирайте (проста версия на) HashMap, който има фиксиран тип на ключовете (string), но поддържа произволни типове на съхраняваните данни. Ползвайте stub skeleton-а от HashMap.cpp (за C++). Не променяйте дефинициите на дадените public методи, но можете да създавате произволни private такива (а както и други public методи, ако ви се струват удачни).

#Cipher Message 2
	Timus problem 1706
	http://acm.timus.ru/problem.aspx?space=1&num=1706

#IntervalTree
	Напишете интервално дърво, което да поддържа следните операции:

	* Строене от дадени N числа.
	* Добавяне към всяко от числата с индекси [idx1, idx2] някакво число add.
	* Намиране на най-голямото число сред тези с индекси [idx1, idx2]

#Persistent vector
	Имплементирайте последната структура, която обсъждахме на лекцията - вектор, представен чрез 32-ично дърво, използващ path copying за персистентност (т.е. структурата, която се използва за immutable векторите в Scala и Clojure). Използвайте файлът за предпочитания от вас език за основа на публичния интерфейс - отделно може да добавяте каквито прецените методи/променливи. Ако добавяте още класове, просто го направете в същия файл.

	Нито един от методите не трябва да модифицира съществуващия обект - затова в C++ всичките имат const qualifier. Постарайте се да не променяте дори вътрешно състояние на обекта, тъй като най-вероятно ще има multithreaded тестове.

	За C++ не се тревожете за memory management - представете си, че работите в среда с Garbage Collection и няма memory leak-ове. В противен случай е по-сложно и потенциално по-бавно да се справите с multithreading.

#Radix trie
	Реализирайте радиксна патриция (Radix Patricia Trie)
	Вашата структура трябва да съхранява за всяка дума допълнителни данни - число без знак, по-малко от 2000000000.

	Трябва да предоставите следния интерфейс:

	// добавя дума с дадени данни
	void insert(const char* word, int data);

	// проверява дали дадена дума се среща в дървото.
	// ако да - връща нейните данни, ако не - връща число < 0
	int find(const char* word);

	// връща данните за всички думи в дървото започващи с даден префикс
	vector<int> getAllWithPrefix(const char* prefix);

	// премахва дума от дървото. Връша true ако думата е премахната и false ако не е
	bool remove(const char* word);


	С помощта на тази структура реализирайте програма, която получава от командния ред два аргумента - имена на файлове:
	<dictionary>: файл, съдържащ речник с думи, които да се добавят в дървото.
	Всеки ред на файла съдържа дума, следвана от интервал и число - нейните данни. (виж примера). Думите са съставени от произволни ASCII символи, като условието е да не съдържат празни символи (' ', '\t', '\n', '\r')
	<text>: файл, съдържащ множество от думи (текст), разделени с празни символи.

	Тази програма трябва да намери за всяка дума от текста нейната оценка, която е сумата от данните
	за всички думи в дървото, имащи тази дума за префикс. След това трябва да изведе на екрана всички
	думи и техните оценки, по една на ред, подредени в намаляващ ред на оценките им. Ако една дума се среща повече от един път трябва да се изведе за всяко срещане. Ако няколко думи имат еднаква оценка редът на извеждане е без значение.

	Пример:

	<dict.txt>
	10 10
	stoian 100
	stomna 20
	pesho 50
	10+10 20

	<text.txt>
	sto na sto pesho e nomer 1

	<извикване>
	myprog.exe dict.txt text.txt

	<изход на stdout>
	sto 120
	sto 120
	pesho 50
	1 30
	e 0
	na 0
	nomer 0

#Suffix array
	Напишете клас SuffixArray, който се създава върху подаден в конструктора низ и след това е immutable.

	Трябва да имате фунцкя 

	vector<int> search(const char* pattern) която връща началата на всички срещания на pattern в низа.

	Напишете кратък текст (може като коментар в кода), в който анализирате сложността на използвания за построяването алгоритъм, както и сложността на търсенето.
	
#DomainCounter (string matching algorithm)
	Даден е текстов файл, който съдържа URL-и, като всеки URL в него e на отделен ред, например:

	http://www.example.com/something/index.html
	https://example.com/somethingelse/
	ftp://1.2.3.4/qweqweqweqwe/qweqweqweqwe/q
	ftp://aaa:bbbbbb@example.com/1/2/3
	https://sub1.sub2.example.org/1/2/file.html
	http://blog.example.com/2015/very_important_stuff/
	Както се вижда от примера, протоколите в адресите могат да бъдат произволни (http, https, ftp, и т.н.).

	Напишете програма, която получава като входни параметри име на файл (-i) и едно или повече имена на домейни (-d). След това тя обхожда файла и извежда на екрана броя на URL-ите, в които участва всяко от имената. За всяко име, което се търси, програмата трябва да изведе един ред, който съдържа името на домейна, тире и брой на неговите срещания (0, ако то не се среща във файла).

	Например ако стартираме програмата за нашия пример така:

	lookup.exe -i urls.txt -d example.com
	тя трябва да изведе:

	example.com - 4
	защото example.com се среща на първия, втория, четвъртия и шестия ред във входния файл.

	Ако я стартираме така:

	lookup.exe -i urls.txt -d example.net -d www.example.com -d w.example.com
	тя трябва да изведе:
	example.net - 0
	www.example.com - 1
	w.example.com - 0
	Забележете, че програмата не трябва просто да търси подниз. Въпреки, че "w.example.com" е подниз на "www.example.com", това не означава, че първият ред на файла е срещане на името w.example.com.
	Освен -i и -d, програмата може да получи и входен параметър, който указва протокол (-p). Ако той бъде зададен, програмата брои само срещанията на имената в адреси с този протокол. Например ако стартираме програмата така:

	lookup.exe -i urls.txt -d example.com -d example.org -p http
	за нашия пример това ще изведе:
	example.com - 2
	example.org - 0
	защото:
	example.com се среща четири пъти, но само в два от адресите протоколът е http;
	example.org се среща веднъж, но протоколът е https.
	За разлика от -d, който може да се подаде няколко пъти, за да укажем няколко домейна, -p може да се подаде само веднъж

	За улеснение считаме, че дължината на един URL е не повече от 1024 символа.

	Няма ограничения за обема на файла, той може да бъде произволно голям.

##Binomial heap
	Реализирайте биномна примамида. Използвайте предоставеният интерфейс binomial_heap.h. Моля за C++ решенията декларирайте всички необходими помощни функции директно в cpp файла.







Условия на проектите Homework one - Homework five от "SD semester projects mostly":

Домашно #1
	Напишете програма която приема за вход инфиксен израз и файл който описва операторите използвани в изараза и извежда резултата след пресмятане на израза. В израза ще има числа, знаци (оператори) и скоби, като скобите винаги са с най-висок приоритет. Операторите в израза са символи които имат определен приоритет и асоциативност описани във входния фаил в следния формат:

	символ оператор приоритет аосциативност
	асоциативност: 1 = дясно, 0 = ляво
	приоритет: по-голям приоритет = изпълнява се преди тези с по-малък
	операторите са тези: +-*/
	символът ще бъде операцията в израза

	Пример за файла:
		a + 10 1
		b + 5 1
		c - 5 1
		d * 10 1
		e / 10 0
		f / 10 1
	Пример за израз:
		31 a ( 5 b 32 f 10 e -230 ) c 324 d 17
	Допълнителни забележки:
	Структурите от данни трябва да са с ваши имплементации или да разбирате в дълбочина използваните.
	Името на файла и израза ще се подават като аргументи на командият ред на вашата програма.
	Файлът с правилата за операторите ще бъде винаги валиден, но изразът ще трябва вие да го валидирате и да изведете съобщение за грешка ако не е валиден.
	Ако има отрицателни числа в израза то знакът минус '-' ще бъде долепен до числото, ако не е долепен то значи този знак трябва да се намира във файлът или израза е невалиден.

Домашно #2 (списък, опашка)
	Имайки следното:
	class Market 
	{
	public:
	    Market(int NumberOfAllCashDecks); // максимални брой каси които може да бъдат отворени в магазина (без експресната)
	    void AddClient(Client * clients, int number); // добавяме number клиенти в магазина
	    MarketState getMarketState(); // връща състоянието на магазина
	    ClientState getClientState(int ID); // връща състоянието на клиента
	};

	struct ClientState
	{
	    int CashDeskPosition; // номер на каса
	    int QueuePosition; // позиция в опашката на касата
	    Client * client;
	};

	struct MarketState
	{
	    int numberOfCashDesk; // броя на касите които са отворили в момента
	    int * numberOfClientsAtCashDecsk; // броя на клиентите на всяка каса в този момент
	    int numberOfClientsAtExpressCashDeck;
	};

	struct Client
	{
	    int ID; // уникален номер на клиента в магазина
	    int numberOfGoods; // брой на покупките на клиента
	    bool creditCard; // истина ако плаща с крединта карта
	};
	Решете следният проблем:

	Имаме магазин с N каси и допълнително една експресна. На всеки "tick" на магазина всички каси обработват по един продукт от кошницата на клиентите клиентите си намират места на касите и може да се случи едно от следните действия(действията се случват в този ред ):

	1. Затваряне на каса
	2. Преместване на клиенти
	3. Отваряне на каса
	** като техния приоритет е както следва  1 > 2 > 3
	Забележка ако има предпоставки за случването на повече от едно действие то се случва само това с най-голям приоритет. Ако има няколко места в магазина където може да се случи едно и също деиствие и то е с най-висок приоритет то се случва само на касата която е с "по-малък пореден номер" (тоест по напред в листа)

	Действията се случват на следният принцип: На всеки "tick" се проверява по колко души има на опашка на всяка каса и ако на някоя каса има повече от N клиента се отваря нова каса и се разделя опашката на две равни части (през средата). Ако има каси чиято разлика е повече от N/8 клента то половината от клиентите на по-дългата опашка трябва да си намерят по удачно място (тоест да се пренаредят по останалите опашки). Ако някоя каса има по малко от N/10 клиента алчния мениджър я затваря и хората трябва да се преразпределят по останалите каси. Когато дойде нов клиент на касите той се нарежда на опашката с най-малко хора или ако с с равен на тази с по-малък пореден номер. Ако клиента има 3 или по-малко продукта и на експресната каса има по-малко от 2*Nто той се нарежда на нея.

	Уточнение експресната каса никога не затваря както и никога не преразпределя клиентите си(тоест не подлежи на никое от горните 3 правила).

	Клиентите идват на всеки "tick" но понеже магазина е доста натоварен то част от тях минават през касите без да са си купили нищо за тях (имат нула продукта и минават директно). Хората които плащат с кредитна карта им отнема 1 "tick" да платят (след като всички продукти са били обработени) а на хората плащащи в брой им отнема 2 "tick"-а.

	При инициализиране на вашия клас ще получите с колко каси разполага магазина. Като в началото задължително ще работи 1 нормална каса + експресната. Чрез методите getClientState и getМаrketState ще искаме да можем да следим текущото състояние на магазина като информация за клента ще получаваме като го търсим по ID-то му което ще получава на входа на магазина (метода Add). При всяко извикване на метода addто в магазина минава един "tick", тоест се правят нужните пренареждания и касите извършват едно действие.

	Изисквания към имплементацията : От вас се изисква да предоставите като публичен интерфейс само функциите които сме ви дали в класа Market (със същите имена на функциите и променливите). Останалата част от имплементацията е изцяло по ваше усмотрение. Също така е задължително да имате списък от опашки който да представлява множеството от каси с чакащите хора на тях .Списъкът и опашката трябва да са имплементирани от вас като не се позволява използването на кой да е контейнер от STL. Може да ползвате други имплементирани контейнери от вас ако сметнете за добре.

Домашно #3
	Направете 5 класа които имплементират Sorter интерфейс и имплементират поне 5 различни алгоритъма за сортиране, като 4 от тях са (heap, merge, quick, insertion).

	template<typename T>
	class Sorter {
	public:
		virtual void sort(T * data, size_t count) = 0;
		virtual unsigned long long getSortTime() const = 0;
	};
	Направете клас, имплементиращ SortTester, който да изпълни сортиращата функция на всеки от класовете подадени в конструктора му. Сортирането се извършва върху данни, които самият SortTester трябва да генерира. Методът getSummary трябва да извежда кратка статистика за изпълнението на сортиращите алгоритми включваща времето за което се изпълняват и описание на данните върху които са работили.

	template<typename T>
	class SortTester {
	public:
		SortTester(Sorter<T> ** sorters, int count) {}
		virtual void getSummary(std::ostream & out) = 0;
	};
	Към домашното си качете кратко описание на данните, които вашият тестов клас генерира. Опишете как се справят алгоритмите, които сте имплементирали с генерираните от вас данни. Добавете и изхода отSortTester::getSummary.

Домашно #4
	Напишете програма която ви позволява да създавате XML документи. Трябва да измислите и направите удобен интерфейс (клас/класове) за създаване на документа и добавяне/премахване/променяне на елемнтите в него. Трябва като минимум да имплементирате следната функционалност:

	Добавяне/Изтриване/Променяне на тагове
	Добавяне/Изтриване/Променяне на атрибути на таг
	Итериране на елементите йерархично
	Изпринтиране на документа в изходен поток по два начина - добре форматирано и сбито (без излишни нови редове и разстояние)
	Забележки:

	Нужно е да се поддържат само ASCII символи
	Достъпа и промяната на елемент става с низ с неговия пълен път в документа, например: "root/person/name". Ако има повече от 1 елемнт, отговарящ на пътя, то тогава се променят всички.
	Използвайте адекватни структури и контейнери за вашите данни, като се грижите за правилното използване на паметта ако ползвате собствени имплементации. Ако не, трябва да разбирате имплементацията която използвате!
	<root>
	  <person>
	    <name>One</name>
	    <name>Something</name>
	    <email/>
	  </person>
	  <person>
	    <name>Two</name>
	    <email>example@example.com</email>
	  </person>
	</root>

Домашно #5
	Хората от гражданска защита искат да си свършат работата добросъвестно и за това искат да знаят къде биха възникнали проблеми при евентуални продължителни валежи в град Чирбод за да могат да предприемат необходимите мерки за отводняването на града в случай на бедствие.
	Тези хора са ви помолили да им помогнете с проблема като съставите програма, която прави симулации. Вашата задача е изключително отговорна и може да спаси домовете на хората.
	След дълги дискусии те са успели да формулират заданието си по подходящ за един програмист начин.
	Град Чирбод има правоъгълна форма. Всички улици минават успоредно на страните на правоъгълника на еднакво разстояние една от друга и от край до край на града. Номерирани са от запад на изток от 0 до M-1и от север на юг от 0 до N-1, където M и N са естествени числа, всяко по-малко от 1000. Всеки две улици които се пресичат в рамките на града образуват кръстовище, номерирано с двата индекса на улиците. Имате карта на която са нанесени височините на кръстовищата - цели числа в интервала [-100, 1000]. Тя представлява матрица NxM. В града всички улици имат еднаква ширина което означава че и еднакво количество вода може да минава през тях за единица време. Нека обозначим това количество с C.
	От вас се иска при наличието на карта на височината на кръстовищата в града и пропускателната възможност на улиците да напишете програма, която симулира оттичането на водата за определено време при падането на дадено количество валежи X във всеки район от града (тоест на всяко кръстовище изливат по X литра вода). Водата тече винаги от високо към ниско (тоест строго >). Като съответно ако има 2 или повече възможни места който са по ниски от текущото, равни количества вода поемат във всички възможни посоки. Кръстовищата който са в края на града имат пропускателна способност навън 2*C към всяка граница с която граничат и приемаме че в съседство на града има по-ниско разположена река която може да поеме неограничено количество вода. Водата тече само по улиците в хоризонтална и вертикална посока, но не тече по диагонал.
	На входа на програмата получавате на първия редчислата M, N и C. Последвани от MxN числа представляващи картата с височините. След това получавате число S последвано от S двойки числа К и Т. K означава литрите който ще паднат на всяко поле е Т е времето което искаме да продължи нашата симулация.
	На изхода искаме да получим S матрици от числа MxN означаващи количеството вода което е останало на кръстовищата след време Т. Ако Т е много голямо число вашата програма трябва да може да осъзнае момента, в който симулацията достига стабилно състояние и няма смисъл да продължава, защото няма как да доведе до ново състояние и трябва да изведете резултата който сте получили в този момент.
